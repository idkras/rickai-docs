#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Rick.ai –Ω–∞ GitHub Pages
–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Å–±–æ—Ä–∫–∞, –∫–æ–º–º–∏—Ç, –ø—É—à, –¥–µ–ø–ª–æ–π
"""

import os
import sys
import subprocess
import time
from datetime import datetime
from pathlib import Path


class Colors:
    """–¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def print_step(message, color=Colors.OKBLUE):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"{color}[{timestamp}] {message}{Colors.ENDC}")


def print_success(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    print(f"{Colors.OKGREEN}‚úÖ {message}{Colors.ENDC}")


def print_error(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    print(f"{Colors.FAIL}‚ùå {message}{Colors.ENDC}")


def print_warning(message):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    print(f"{Colors.WARNING}‚ö†Ô∏è  {message}{Colors.ENDC}")


def run_command(command, check=True, capture_output=False, cwd=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        if capture_output:
            result = subprocess.run(
                command, 
                shell=True, 
                check=check, 
                capture_output=True, 
                text=True,
                cwd=cwd
            )
        else:
            result = subprocess.run(
                command, 
                shell=True, 
                check=check,
                cwd=cwd
            )
        return result
    except subprocess.CalledProcessError as e:
        if check:
            print_error(f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")
            sys.exit(1)
        return e


def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è"""
    print_step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("mkdocs.yml").exists():
        print_error("mkdocs.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ rickai_docs")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ git –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if not Path(".git").exists():
        print_error("Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å remote origin
    result = run_command("git remote get-url origin", check=False, capture_output=True)
    if result.returncode != 0:
        print_error("Remote origin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        sys.exit(1)
    
    print_success("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")


def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print_step("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ requirements.txt
    if not Path("requirements.txt").exists():
        print_warning("requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    run_command("pip install -r requirements.txt")
    print_success("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def build_documentation():
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"""
    print_step("–°–æ–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É
    if Path("site").exists():
        run_command("rm -rf site")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    run_command("mkdocs build")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    if not Path("site").exists():
        print_error("–°–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)
    
    print_success("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")


def git_operations():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç git –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    print_step("–í—ã–ø–æ–ª–Ω—è–µ–º git –æ–ø–µ—Ä–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å git
    status_result = run_command("git status --porcelain", capture_output=True)
    has_changes = bool(status_result.stdout.strip())
    
    if not has_changes:
        print_warning("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    run_command("git add .")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    commit_message = f"Update documentation {timestamp}"
    run_command(f'git commit -m "{commit_message}"')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    run_command("git push origin main")
    
    print_success("Git –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True


def deploy_to_github_pages():
    """–î–µ–ø–ª–æ–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ GitHub Pages"""
    print_step("–î–µ–ø–ª–æ–∏–º –Ω–∞ GitHub Pages...")
    
    # –î–µ–ø–ª–æ–∏–º —Å –ø–æ–º–æ—â—å—é mkdocs
    run_command("mkdocs gh-deploy --force")
    
    print_success("–î–µ–ø–ª–æ–π –Ω–∞ GitHub Pages –∑–∞–≤–µ—Ä—à–µ–Ω")


def show_final_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    print_step("–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!", Colors.HEADER)
    print(f"{Colors.BOLD}–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:{Colors.ENDC}")
    print(f"{Colors.OKCYAN}https://idkras.github.io/rickai-docs/{Colors.ENDC}")
    print()
    print(f"{Colors.BOLD}–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:{Colors.ENDC}")
    print(f"{Colors.OKCYAN}mkdocs serve{Colors.ENDC} - –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
    print(f"{Colors.OKCYAN}mkdocs build{Colors.ENDC} - —Å–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    print(f"{Colors.OKCYAN}mkdocs gh-deploy{Colors.ENDC} - –¥–µ–ø–ª–æ–π –Ω–∞ GitHub Pages")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"{Colors.HEADER}{Colors.BOLD}")
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Rick.ai")
    print("=" * 50)
    print(f"{Colors.ENDC}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        check_prerequisites()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        install_dependencies()
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        build_documentation()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º git –æ–ø–µ—Ä–∞—Ü–∏–∏
        git_operations()
        
        # –î–µ–ø–ª–æ–∏–º –Ω–∞ GitHub Pages
        deploy_to_github_pages()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        show_final_info()
        
    except KeyboardInterrupt:
        print_error("–î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
